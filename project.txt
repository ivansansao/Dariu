// chatgpt answer !

checkCollisions() {
    for (let row = topTile; row <= bottomTile; row++) {
        for (let col = leftTile; col <= rightTile; col++) {
            if (tilemap[row][col] == 1) {
                // Collision detected
                return true;
            }
        }
    }

    // No collision detected
    return false;
}

update() {
    // Move player left or right
    if (input.left) {
        player.x -= PLAYER_SPEED;
        if (checkCollisions()) {
            // Undo move if collision detected
            player.x += PLAYER_SPEED;
        }
    } else if (input.right) {
        player.x += PLAYER_SPEED;
        if (checkCollisions()) {
            // Undo move if collision detected
            player.x -= PLAYER_SPEED;
        }
    }

    // Move player up or down
    if (input.up) {
        player.y -= PLAYER_SPEED;
        if (checkCollisions()) {
            // Undo move if collision detected
            player.y += PLAYER_SPEED;
        }
    } else if (input.down) {
        player.y += PLAYER_SPEED;
        if (checkCollisions()) {
            // Undo move if collision detected
            player.y -= PLAYER_SPEED;
        }
    }
}
---------------------------------------------------------
// Right left

if (sf::Keyboard::isKeyPressed(sf::Keyboard::Right)) {
    velocity.x += 3;
    velocity.x = std::min(5.f, velocity.x);
    direction_x = 1;
} else if (sf::Keyboard::isKeyPressed(sf::Keyboard::Left)) {
    velocity.x -= 3;
    velocity.x = std::max(-5.f, velocity.x);
    direction_x = -1;
} else {
    if (velocity.x > 0.f) {
        velocity.x -= 0.2f;
        velocity.x = std::max(0.f, velocity.x);
    } else if (velocity.x < 0.f) {
        velocity.x += 0.2f;
        velocity.x = std::min(0.f, velocity.x);
    }
    velocity.x = 0;
}
---------------------------------------------------------

